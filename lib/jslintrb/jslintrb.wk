# -*- mode: ruby -*-

require 'json'

module JSLintRb; end
class JSLintRb::Plugin < Wake::Plugin
  extend Wake::Plugin::Class

  default :regexp => /\.js$/

  def watcher
    default = super
    lambda do |path, graph|
      if node = default.call( path, graph )
        create graph, Node::Virtual.new( graph, node, cls.default[:options][:virtual] ),
                     :from => node, :plugin => self
      end
    end
  end

  def fire_all
    lambda do |nodes|
      succeeded = nodes.inject({}) { |hash, node| hash[node] = true; hash }
      cmd = "jslintrb #{nodes.map { |node| node.primary.path }.uniq.join(' ')}"
      puts cmd
      now = Time.now();
      open("|"+cmd) do |f|
        f.each do |line|
          $stderr.puts line
          m = /^([^ ]+) line \d+ character \d+:/.match(line)
          path = m[1] if m
          if path
            array = nodes.select { |node| node.primary.path == path }
            succeeded[array[0]] = false
          end
        end
      end
      puts "\nFinished in #{Time.now()-now} seconds"
      # require 'pp'
      # pp (succeeded.map { |k,v| [ k.path, v ] })
      success = true
      succeeded.each do |node, v|
        node.succeeded = v
        success &&= v
        node.save!
      end
      success
    end
  end

end
